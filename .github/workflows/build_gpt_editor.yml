name: Build GPT Editor

on:
  workflow_dispatch:
    inputs:
      SSH:
        description: 'SSH connection to Actions'
        required: true
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # 允许访问仓库内容

    steps:
      # 步骤 1：检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 步骤 2：安装 Python 2.7
      - name: Install Python 2.7
        run: |
          sudo apt-get update
          sudo apt-get install -y python2
          python2 --version

      # 步骤 3：安装 Python2 依赖（如 argparse）
      - name: Install Python2 dependencies
        run: |
          sudo apt-get install -y python-pip
          pip2 install argparse

      # 步骤 4：创建输入目录并添加示例 JSON 文件
      - name: Prepare input JSON files
        working-directory: atf-20231013-0ea67d76a/tools/dev/gpt_editor
        run: |
          mkdir -p mt798x
          echo '{"partition": "example", "size": "4MB"}' > mt798x/example.json
          echo "Created example input JSON files in mt798x/"
          ls -al mt798x

      # 步骤 5：赋予 generate_gpt.sh 执行权限
      - name: Make generate_gpt.sh executable
        working-directory: atf-20231013-0ea67d76a/tools/dev/gpt_editor
        run: |
          chmod +x generate_gpt.sh

      # 步骤 6：运行 generate_gpt.sh 脚本，并打印详细日志
      - name: Generate GPT binaries
        working-directory: atf-20231013-0ea67d76a/tools/dev/gpt_editor
        run: |
          set -x  # 打印所有执行命令
          ./generate_gpt.sh
          echo "Finished running generate_gpt.sh"
          echo "Contents of gpt_output directory:"
          ls -al gpt_output || echo "No gpt_output directory found"

      # 步骤 7：验证 gpt_output 目录是否生成
      - name: Verify gpt_output directory
        working-directory: atf-20231013-0ea67d76a/tools/dev/gpt_editor
        run: |
          if [ ! -d "./gpt_output" ]; then
            echo "Build failed: gpt_output directory not found!"
            exit 1
          fi
          echo "Generated GPT binaries:"
          ls -al gpt_output

      # 步骤 8：调试当前日期和时间
      - name: Debug current date and time
        run: |
          echo "Current date and time is: $(date +'%Y%m%d%H%M%S')"

      # 步骤 9：创建 gpt_output.zip 文件，并加上日期
      - name: Create gpt_output.zip with date
        working-directory: atf-20231013-0ea67d76a/tools/dev/gpt_editor
        run: |
          # 使用调试输出的日期时间格式
          ZIP_NAME="gpt_output_$(date +'%Y%m%d%H%M%S').zip"
          
          # 输出调试信息查看 ZIP_NAME 是否正确
          echo "ZIP_NAME is: $ZIP_NAME"
          
          # 创建 zip 文件
          zip -r $ZIP_NAME gpt_output
          
          # 输出文件是否已创建
          echo "$ZIP_NAME created"
          ls -al

      # 步骤 10：验证 ZIP 文件是否已创建
      - name: Verify gpt_output.zip creation
        run: |
          echo "Checking for ZIP file: ${{ env.ZIP_NAME }}"
          ls -al atf-20231013-0ea67d76a/tools/dev/gpt_editor/${{ env.ZIP_NAME }} || echo "ZIP file not found"

      # 步骤 11：创建 Release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.sha }}-${{ github.run_id }}  # 使用提交SHA和运行ID生成唯一标签
          name: "GPT Binaries Release"  # 使用 'name' 而不是 'release_name'
          body: "This release contains the generated GPT binaries."
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 步骤 12：上传 Release 中的 GPT 二进制文件
      - name: Upload GPT files to release
        uses: softprops/action-gh-release@v1
        with:
          files: atf-20231013-0ea67d76a/tools/dev/gpt_editor/${{ env.ZIP_NAME }}  # 指定相对路径
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
