name: Build GPT Editor

on:
  push:
    branches:
      - emmc
    tags:
      - 'v*.*.*'  # Only trigger for tag pushes

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Install Python 2.7 and pip
      - name: Install Python 2.7 and pip
        run: |
          sudo apt-get update
          sudo apt-get install -y python2 python-pip
          python2 --version
          pip2 --version

      # 3. Install Python dependencies
      - name: Install Python dependencies
        run: pip2 install argparse

      # 4. Prepare input JSON files
      - name: Prepare input JSON files
        working-directory: atf-20231013-0ea67d76a/tools/dev/gpt_editor
        run: |
          echo "Creating input JSON files..."
          mkdir -p mt798x
          echo '{"partition": "example", "size": "4MB"}' > mt798x/example.json
          ls -al mt798x  # 显示文件夹内容，确认文件已创建

      # 5. Make generate_gpt.sh executable
      - name: Make generate_gpt.sh executable
        working-directory: atf-20231013-0ea67d76a/tools/dev/gpt_editor
        run: chmod +x generate_gpt.sh

      # 6. Run generate_gpt.sh script
      - name: Run generate_gpt.sh script
        working-directory: atf-20231013-0ea67d76a/tools/dev/gpt_editor
        run: |
          echo "Current directory before running generate_gpt.sh:"
          pwd  # 输出当前工作目录
          ls -al  # 显示当前目录的文件
          echo "Running generate_gpt.sh..."
          ./generate_gpt.sh  # 运行脚本
          echo "Finished running generate_gpt.sh"
          echo "Directory contents after running generate_gpt.sh:"
          ls -al  # 再次显示目录内容，确认 gpt_output 是否存在
          
      # 7. Verify if gpt_output directory exists
      - name: Verify GPT output directory
        run: |
          echo "Checking if gpt_output directory exists..."
          if [ ! -d "./gpt_output" ]; then
            echo "Build failed: gpt_output directory not found!"
            exit 1
          fi
          echo "Generated GPT binaries:"
          ls -al gpt_output  # 显示 gpt_output 文件夹的内容

      # 8. Zip the GPT binaries
      - name: Zip GPT binaries
        run: |
          echo "Zipping GPT binaries..."
          cd atf-20231013-0ea67d76a/tools/dev/gpt_editor
          zip -r gpt_binaries.zip gpt_output/
          echo "Files zipped successfully."

      # 9. Create GitHub Release (only for tags)
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # 10. Upload the zipped GPT binaries to the release
      - name: Upload GPT binaries to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: atf-20231013-0ea67d76a/tools/dev/gpt_editor/gpt_binaries.zip
          asset_name: gpt_binaries.zip
          asset_content_type: application/zip
