name: Build GPT Editor

on:
  workflow_dispatch:
    inputs:
      SSH:
        description: 'SSH connection to Actions'
        required: true
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # 允许访问仓库内容

    steps:
      # 步骤 1：检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 步骤 2：安装 Python 2.7
      - name: Install Python 2.7
        run: |
          sudo apt-get update
          sudo apt-get install -y python2
          python2 --version

      # 步骤 3：安装 Python2 依赖（如 argparse）
      - name: Install Python2 dependencies
        run: |
          sudo apt-get install -y python-pip
          pip2 install argparse

      # 步骤 4：创建输入目录并添加示例 JSON 文件
      - name: Prepare input JSON files
        working-directory: atf-20231013-0ea67d76a/tools/dev/gpt_editor
        run: |
          mkdir -p mt798x
          echo '{"partition": "example", "size": "4MB"}' > mt798x/example.json
          echo "Created example input JSON files in mt798x/"
          ls -al mt798x

      # 步骤 5：赋予 generate_gpt.sh 执行权限
      - name: Make generate_gpt.sh executable
        working-directory: atf-20231013-0ea67d76a/tools/dev/gpt_editor
        run: |
          chmod +x generate_gpt.sh

      # 步骤 6：运行 generate_gpt.sh 脚本，并打印详细日志
      - name: Generate GPT binaries
        working-directory: atf-20231013-0ea67d76a/tools/dev/gpt_editor
        run: |
          set -x  # 打印所有执行命令
          ./generate_gpt.sh
          echo "Finished running generate_gpt.sh"
          echo "Contents of gpt_output directory:"
          ls -al gpt_output || echo "No gpt_output directory found"

      # 步骤 7：验证 gpt_output 目录是否生成
      - name: Verify gpt_output directory
        working-directory: atf-20231013-0ea67d76a/tools/dev/gpt_editor
        run: |
          if [ ! -d "./gpt_output" ]; then
            echo "Build failed: gpt_output directory not found!"
            exit 1
          fi
          echo "Generated GPT binaries:"
          ls -al gpt_output

      # 步骤 8：打包 gpt_output 为 zip 文件，并加上日期
      - name: Create gpt_output.zip with date
        working-directory: atf-20231013-0ea67d76a/tools/dev/gpt_editor
        run: |
          ZIP_NAME="gpt_output_$(date +%Y%m%d_%H%M%S).zip
          echo "Generated ZIP file name: $ZIP_NAME"
          zip -r "$ZIP_NAME" gpt_output
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          echo "$ZIP_NAME created"
          ls -al

      # 步骤 9：验证 ZIP 文件是否已创建
      - name: Verify gpt_output.zip creation
        run: |
          echo "Checking for ZIP file: ${{ env.ZIP_NAME }}"
          ls -al atf-20231013-0ea67d76a/tools/dev/gpt_editor/${{ env.ZIP_NAME }} || echo "ZIP file not found"
          # 调试输出
          echo "Current Date and Time: $(date +%Y%m%d_%H%M%S)"

      # 步骤 10：创建 Release
      - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          with:
            tag_name: v${{ github.sha }}-${{ github.run_id }}  # 使用提交SHA和运行ID生成唯一标签
            release_name: "GPT Binaries Release"  # 使用 'name' 而不是 'release_name'
            body: "This release contains the generated GPT binaries."
            draft: false
            prerelease: false
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            ZIP_NAME: ${{ env.ZIP_NAME }}  # 确保将 ZIP_NAME 环境变量传递给后续步骤

      # 步骤 11：上传 Release 中的 GPT 二进制文件
      - name: Upload GPT files to release
          uses: actions/upload-release-asset@v1
          with:
                upload_url: ${{ steps.create_release.outputs.upload_url }}  # 使用创建的 Release URL
                asset_path: atf-20231013-0ea67d76a/tools/dev/gpt_editor/${{ env.ZIP_NAME }}  # 确保使用环境变量中的文件路径
                asset_name: ${{ env.ZIP_NAME }}  # 文件名应该也是带有日期的
                asset_content_type: application/zip
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
